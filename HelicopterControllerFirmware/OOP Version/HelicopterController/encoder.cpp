/*
Name: encoder.cpp
Created: 2/25/2016
Author:	Aftab
*/

#include <digitalWriteFast.h>
#include "encoder.h"
#include "utility.h"

const double Encoder::DBL_TotalRangeDegrees = 360.0;
const double Encoder::DBL_DegreesPerPulse = Encoder::DBL_TotalRangeDegrees / Encoder::DBL_DegreesPerPulse;
const signed int Encoder::encoderLookup[] = { 0, -1, 1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, 0 };

Encoder *Encoder::encoder;

Encoder::Encoder() {}

Encoder::~Encoder() {}

// Using a singleton pattern in order to let the static ISR know about the encoder object
Encoder* Encoder::getEncoder()
{
	if (!encoder)
	{
		encoder = new Encoder();
	}

	return encoder;
}

void Encoder::destruct()
{
	if (encoder)
	{
		delete encoder;
	}
}

void Encoder::quadratureDecoderISR(void)
{
	encoder->encoderValues <<= 2;
	encoder->encoderValues |= ((digitalReadFast(Utility::PIN_EncoderChannelA) << 1) | digitalReadFast(Utility::PIN_EncoderChannelB));
	encoder->currentAngle += encoderLookup[encoder->encoderValues & 0x0F] * Encoder::DBL_DegreesPerPulse;
}// Taken and modified from: http://www.mkesc.co.uk/ise.pdf

// This fires when a pulse is generated by edge detector circuit on external interrupt 0

void Encoder::initialize()
{
	pinModeFast(Utility::PIN_EncoderChannelA, INPUT);
	pinModeFast(Utility::PIN_EncoderChannelB, INPUT);
	encoderValues = (digitalReadFast(Utility::PIN_EncoderChannelA) << 1) | digitalReadFast(Utility::PIN_EncoderChannelB);

	// Sets ISR for external interrupt on pin 2
	attachInterrupt(0, quadratureDecoderISR, RISING);
}

void Encoder::zeroAngle()
{
	currentAngle = 0;
}