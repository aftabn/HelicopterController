<Window x:Class="Helicopter.GUI.HelicopterControllerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Helicopter.GUI"
        xmlns:Util="clr-namespace:Libs.Utilities;assembly=Libs.Utilities"
        xmlns:Core="clr-namespace:Helicopter.Core;assembly=Helicopter.Core"
        xmlns:Controller="clr-namespace:Helicopter.Core.Controller;assembly=Helicopter.Core"
        mc:Ignorable="d"
        Title="Helicopter Controller Software"
        Height="733.419" Width="1500"
        MinHeight="500" MinWidth="600"
        Loaded="WindowLoaded"
	    Closing="OnWindowClosing">
    <Window.Resources>
        <CollectionViewSource x:Key="helicopterViewModelSource" d:DesignSource="{d:DesignInstance {x:Type Core:HelicopterViewModel}, CreateList=True}" />
    </Window.Resources>
    <DockPanel>
        <Menu x:Name="menuHeader" DockPanel.Dock="Top" Height="30" IsMainMenu="True">
            <MenuItem Header="File" Margin="5,5,5,5">
                <MenuItem x:Name="loadSettingsFileItem" Header="Load Settings" Command="{Binding LoadSettingsFileCommand}" />
            </MenuItem>
            <MenuItem Header="Tools" Margin="5,5,5,5" />
        </Menu>
        <ToolBar x:Name="optionsToolbar" DockPanel.Dock="Top" Height="28" Background="WhiteSmoke">
            <Button Margin="3,0,3,0" BorderThickness="1" BorderBrush="DarkGray" Padding="15,2,15,2" Content="Connect" Command="{Binding ConnectCommand}" />
            <Button Margin="3,0,3,0" BorderThickness="1" BorderBrush="DarkGray" Padding="15,2,15,2" Content="Disconnect" Command="{Binding DisconnectCommand}" />
        </ToolBar>
        <StatusBar x:Name="statusBar" DockPanel.Dock="Bottom" Background="Firebrick" Foreground="White" Height="27">
            <StatusBarItem>
                <TextBlock x:Name="helicopterControllerStatusTextbox" Padding="10,2,10,2"><Run Text="Helicopter Controller Status" /></TextBlock>
            </StatusBarItem>
        </StatusBar>
        <TabControl x:Name="controllerTabs">
            <TabItem x:Name="operatorTab" Header="Operator">
                <DockPanel x:Name="mainDockPanel">
                    <StackPanel DockPanel.Dock="Left" Margin="5" Width="150"></StackPanel>
                    <StackPanel DockPanel.Dock="Left" Margin="5" Width="150"></StackPanel>
                </DockPanel>
            </TabItem>
            <TabItem x:Name="DeveloperTab" Header="Developer">
                <DockPanel x:Name="developerDockPanel">
                    <StackPanel DockPanel.Dock="Left"  Margin="5,10,5,5" Width="150">
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Connection Type:" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <StackPanel.Resources>
                                    <Util:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
                                    <Util:InverseBooleanConverter x:Key="InverseBooleanConverter" />
                                </StackPanel.Resources>
                                <RadioButton Margin="0,2,0,0" IsEnabled="{Binding Path=IsConnected, Converter={StaticResource InverseBooleanConverter}}"
                                             IsChecked="{Binding Path=ConnectionType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static Controller:ConnectionType.Serial}}" />
                                <TextBlock VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="35"><Run Text="Serial" /></TextBlock>
                                <RadioButton Margin="0,2,0,0" IsEnabled="{Binding Path=IsConnected, Converter={StaticResource InverseBooleanConverter}}"
                                             IsChecked="{Binding Path=ConnectionType, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static Controller:ConnectionType.Bluetooth}}" />
                                <TextBlock VerticalAlignment="Center" Height="20" Margin="5,0,0,0" Width="55"><Run Text="Bluetooth" /></TextBlock>
                            </StackPanel>
                        </StackPanel>
                        <Separator Margin="5,5,5,10" />
                        <Button Margin="5,0,5,5" Content="Controller Info" Command="{Binding GetControllerInfoCommand}" />
                        <Button Margin="5,0,5,5" Content="Disable Motors" Command="{Binding DisableMotorsCommand}" />
                        <Button Margin="5,0,5,5" Content="Refresh Values" Command="{Binding RefreshValuesCommand}" />
                        <Separator Margin="5,5,5,10" />
                        <Button Margin="5,0,5,5" Content="Start PID Session" Command="{Binding StartPidSessionCommand}" />
                        <Button Margin="5,0,5,5" Content="Stop PID Session" Command="{Binding StopPidSessionCommand}" />
                        <Separator Margin="5,5,5,10" />
                        <Button Margin="5,0,5,5" Content="Enable PID" Command="{Binding EnablePidCommand}" />
                        <Button Margin="5,0,5,5" Content="Disable PID" Command="{Binding DisablePidCommand}" />
                        <Separator Margin="5,5,5,10" />
                        <Button Margin="5,0,5,5" Content="Enable Safety" Command="{Binding EnableSafetyCommand}" />
                        <Button Margin="5,0,5,5" Content="Disable Safety" Command="{Binding DisableSafetyCommand}" />
                    </StackPanel>
                    <StackPanel DockPanel.Dock="Left" Margin="5,0,5,5" Width="150">
                        <TextBlock TextAlignment="Center" Margin="0,5,0,0"><Run Text="Yaw Controller" /></TextBlock>
                        <Separator Margin="20,2,20,0" />
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Current Angle" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Get" Command="{Binding GetYawAngleCommand}" />
                                <TextBlock Background="White" Margin="5,0,5,0" Width="95" TextAlignment="Center" Text="{Binding Path=YawCurrentAngle}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Angle Set Point" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetYawSetPointCommand}" CommandParameter="{Binding ElementName=setYawSetPointTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setYawSetPointTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=YawSetPoint}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Output Percentage" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetYawOutputPercentageCommand}" CommandParameter="{Binding ElementName=setYawOutputPercentageTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setYawOutputPercentageTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=YawOutputPercentage}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Direction" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <StackPanel.Resources>
                                    <Util:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
                                    <Util:InverseBooleanConverter x:Key="InverseBooleanConverter" />
                                </StackPanel.Resources>
                                <RadioButton Margin="0,2,0,0" IsEnabled="{Binding Path=IsPidEnabled, Converter={StaticResource InverseBooleanConverter}}"
                                             IsChecked="{Binding Path=YawDirection, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static Controller:Direction.Clockwise}}" />
                                <TextBlock VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="40"><Run Text="CW" /></TextBlock>
                                <RadioButton Margin="0,2,0,0" IsEnabled="{Binding Path=IsPidEnabled, Converter={StaticResource InverseBooleanConverter}}"
                                             IsChecked="{Binding Path=YawDirection, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static Controller:Direction.CounterClockwise}}" />
                                <TextBlock VerticalAlignment="Center" Height="20" Margin="5,0,0,0" Width="40"><Run Text="CCW" /></TextBlock>
                            </StackPanel>
                        </StackPanel>
                        <Button Margin="5,5,5,5" Content="Zero Angle" Command="{Binding ZeroYawAngleCommand}" />
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Proportional Gain" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetYawProportionalGainCommand}" CommandParameter="{Binding ElementName=setYawProportionalGainTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setYawProportionalGainTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=YawProportionalGain}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Integral Gain" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetYawIntegralGainCommand}" CommandParameter="{Binding ElementName=setYawIntegralGainTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setYawIntegralGainTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=YawIntegralGain}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Derivative Gain" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetYawDerivativeGainCommand}" CommandParameter="{Binding ElementName=setYawDerivativeGainTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setYawDerivativeGainTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=YawDerivativeGain}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Integral Windup Thresh." /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetYawIntegralWindupThresholdCommand}" CommandParameter="{Binding ElementName=setYawIntegralWindupThresholdTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setYawIntegralWindupThresholdTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=YawIntegralWindupThreshold}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Output Rate Limit" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetYawOutputRateLimitCommand}" CommandParameter="{Binding ElementName=setYawOutputRateLimitTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setYawOutputRateLimitTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=YawOutputRateLimit}" />
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel DockPanel.Dock="Left"  Margin="5,0,5,5" Width="150">
                        <TextBlock TextAlignment="Center" Margin="0,5,0,0"><Run Text="Tilt Controller" /></TextBlock>
                        <Separator Margin="20,2,20,0" />
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Current Angle" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Get" Command="{Binding GetTiltAngleCommand}" />
                                <TextBlock Background="White" Margin="5,0,5,0" Width="95" TextAlignment="Center" Text="{Binding Path=TiltCurrentAngle}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Angle Set Point" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetTiltSetPointCommand}" CommandParameter="{Binding ElementName=setTiltSetPointTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="3,0,3,0" Width="45" x:Name="setTiltSetPointTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="3,0,3,0" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=TiltSetPoint}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Output Percentage" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetTiltOutputPercentageCommand}" CommandParameter="{Binding ElementName=setTiltOutputPercentageTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setTiltOutputPercentageTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=TiltOutputPercentage}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Direction" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <StackPanel.Resources>
                                    <Util:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
                                    <Util:InverseBooleanConverter x:Key="InverseBooleanConverter" />
                                </StackPanel.Resources>
                                <RadioButton Margin="0,2,0,0" IsEnabled="{Binding Path=IsPidEnabled, Converter={StaticResource InverseBooleanConverter}}"
                                             IsChecked="{Binding Path=TiltDirection, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static Controller:Direction.Clockwise}}" />
                                <TextBlock VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="40"><Run Text="CW" /></TextBlock>
                                <RadioButton Margin="0,2,0,0" IsEnabled="{Binding Path=IsPidEnabled, Converter={StaticResource InverseBooleanConverter}}"
                                             IsChecked="{Binding Path=TiltDirection, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static Controller:Direction.CounterClockwise}}" />
                                <TextBlock VerticalAlignment="Center" Height="20" Margin="5,0,0,0" Width="40"><Run Text="CCW" /></TextBlock>
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Proportional Gain" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetTiltProportionalGainCommand}" CommandParameter="{Binding ElementName=setTiltProportionalGainTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setTiltProportionalGainTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=TiltProportionalGain}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Integral Gain" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetTiltIntegralGainCommand}" CommandParameter="{Binding ElementName=setTiltIntegralGainTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setTiltIntegralGainTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=TiltIntegralGain}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Derivative Gain" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetTiltDerivativeGainCommand}" CommandParameter="{Binding ElementName=setTiltDerivativeGainTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setTiltDerivativeGainTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=TiltDerivativeGain}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Integral Windup Thresh." /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetTiltIntegralWindupThresholdCommand}" CommandParameter="{Binding ElementName=setTiltIntegralWindupThresholdTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setTiltIntegralWindupThresholdTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=TiltIntegralWindupThreshold}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Output Rate Limit" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <Button VerticalAlignment="Center" Width="40" Content="Set" Command="{Binding SetTiltOutputRateLimitCommand}" CommandParameter="{Binding ElementName=setTiltOutputRateLimitTextbox, Path=Text}" />
                                <TextBox VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="45" x:Name="setTiltOutputRateLimitTextbox" />
                                <TextBox VerticalAlignment="Center" Height="20" Width="45" IsReadOnly="True" Background="LightGray" Text="{Binding Path=TiltOutputRateLimit}" />
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Margin="5,5,5,0">
                            <TextBlock VerticalAlignment="Center" Height="20"><Run Text="Driver Type" /></TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <StackPanel.Resources>
                                    <Util:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
                                    <Util:InverseBooleanConverter x:Key="InverseBooleanConverter" />
                                </StackPanel.Resources>
                                <RadioButton Margin="0,2,0,0" IsEnabled="{Binding Path=IsPidEnabled, Converter={StaticResource InverseBooleanConverter}}"
                                             IsChecked="{Binding Path=TiltMotorDriver, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static Controller:MotorDriver.AnalogVoltage}}" />
                                <TextBlock VerticalAlignment="Center" Height="20" Margin="5,0,5,0" Width="40"><Run Text="A.V." /></TextBlock>
                                <RadioButton Margin="0,2,0,0" IsEnabled="{Binding Path=IsPidEnabled, Converter={StaticResource InverseBooleanConverter}}"
                                             IsChecked="{Binding Path=TiltMotorDriver, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static Controller:MotorDriver.Frequency}}" />
                                <TextBlock VerticalAlignment="Center" Height="20" Margin="5,0,0,0" Width="40"><Run Text="Freq." /></TextBlock>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                    <Border x:Name="controllerOutputPanel" BorderBrush="Gray" BorderThickness="1" Margin="5,0" Width="295" DockPanel.Dock="Left">
                        <TextBox x:Name="controllerOutputTextbox" TextWrapping="WrapWithOverflow" Background="LightGray" Padding="5" IsReadOnly="True" Text="{Binding OutputText}" />
                    </Border>
                </DockPanel>
            </TabItem>
        </TabControl>
        <local:RealTimePidChart x:Name="pidChart" />
    </DockPanel>
</Window>